require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const Calendar = require('telegram-inline-calendar');
const chrono = require('chrono-node/ru');
const db = require('./db/reminder-db');

const token = process.env.TELEGRAM_BOT_TOKEN
const bot = new TelegramBot(token, {polling: true});
const calendar = new Calendar(bot, {
    date_format: 'DD-MM-YYYY',
    language: 'ru'
});


const userStates = new Map();

const scheduleReminder = (reminder) => {
    console.log(reminder);
    const delay = reminder.remind_at - Date.now();
    console.log(delay);
    if (delay > 0) {
        setTimeout(() => {
            bot.sendMessage(reminder.chat_id, `üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: ${reminder.task}`);
            db.deleteReminder(reminder.id);
        }, delay);
    } else {
        db.deleteReminder(reminder.id);
    }
};

for (const reminder of db.getReminders()) {
    scheduleReminder(reminder);
}

bot.onText(/\/—Å—Ç–∞—Ä—Ç|\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, 'üëã –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –ø–æ–º–æ—á—å?', mainMenu());
});

bot.onText(/\/–Ω–∞–ø–æ–º–Ω–∏ (.+)/i, (msg, match) => {
    console.log(typeof match);
    return handleSetReminder(msg, match)
});

bot.onText(/\/—Å–ø–∏—Å–æ–∫/, (msg) => {
    handleReminderList(msg.chat.id);
});

bot.onText(/\/–æ—Ç–º–µ–Ω–∞ (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const id = parseInt(match[1]);

    const reminders = db.getUserReminders(chatId);
    const existingReminder = reminders.find(r => r.id === id);

    if (!existingReminder) {
        return bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    db.deleteReminder(id);
    bot.sendMessage(chatId, `–ó–∞–±—ã–ª–∏ –ø—Ä–æ ${existingReminder.text}`);
});

bot.onText(/\/–ø–æ–º–æ—â—å/, (msg) => {
    handleShowCommands(msg.chat.id)
});

bot.on("callback_query", (query) => {
    const userId = query.from.id;

    if (query.message.message_id == calendar.chats.get(query.message.chat.id)) {
        let res = calendar.clickButtonCalendar(query);
        if (res !== -1) {
            userStates.set(userId, { date: res, step: 0, answers: [] });
            bot.sendMessage(query.message.chat.id, "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ü—Ä–∏–º–µ—Ä: 21:00");
        }
    }
});

bot.on('message', (msg) => {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const state = userStates.get(userId);

    if (text === 'üìã –°–ø–∏—Å–æ–∫') {
        return handleReminderList(msg.chat.id);
    } else if (text === 'üìñ –ö–æ–º–∞–Ω–¥—ã') {
        return handleShowCommands(msg.chat.id);
    } else if (text === 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å') {
        return handleCalendarSchedule(msg);
    }

    if (msg.location) {
        const { latitude, longitude } = msg.location;
        // –¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –≤—Ä–æ–¥–µ timezonedb –∏–ª–∏ Google TimeZone API
    }

    if (!state) return;

    const { step, answers, date } = state;

    answers[step] = msg.text;

    if (step === 0) {
        bot.sendMessage(chatId, '–û —á–µ–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?');
        userStates.set(userId, { date, step: 1, answers });
    } else if (step === 1) {
        const [time, text] = answers;

        handleSetReminder(msg, [`${date} ${time} ${text}`]);
        userStates.delete(userId);
    }
});

function mainMenu() {
    return {
        reply_markup: {
            keyboard: [
                [
                    {text: 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_query: 'schedule'},
                    {text: 'üìã –°–ø–∏—Å–æ–∫', callback_query: 'list'},
                    {text: 'üìñ –ö–æ–º–∞–Ω–¥—ã', callback_query: 'help'},
                    {text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location: true}
                ],
            ],
            resize_keyboard: true,
        }
    }
}

function handleReminderList(chatId) {
    const reminders = db.getReminders(chatId);

    if (reminders.length === 0) {
        return bot.sendMessage(chatId, 'üï≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
    }

    const list = reminders.map(r => `üïë id: ${r.id} ${new Date(r.remind_at).toLocaleString()} ‚Äî ${r.task}`).join('\n');

    bot.sendMessage(chatId, `üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n${list}`);
}

function handleShowCommands(chatId) {
    return bot.sendMessage(
        chatId,
        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n' +
        '\n' +
        '- /–Ω–∞–ø–æ–º–Ω–∏ {—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –¥–∞—Ç–æ–π} - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "/–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞ –∫—É–ø–∏—Ç—å –∫–æ—Ñ–µ" \n' +
        '\n' +
        '- /—Å–ø–∏—Å–æ–∫ - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π \n' +
        '\n' +
        '- /–æ—Ç–º–µ–Ω–∞ {id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è} - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ id, –Ω–∞–ø—Ä–∏–º–µ—Ä "/–æ—Ç–º–µ–Ω–∞ 4" \n'
    );
}

function handleCalendarSchedule(msg) {
    calendar.startNavCalendar(msg);
}

function handleSetReminder(msg, match) {
    const chatId = msg.chat.id;
    const text = match[1];

    const parsed = chrono.parse(text)[0];
    console.log(chrono.parse(text))
    console.log(parsed)
    if (!parsed) {
        return bot.sendMessage(chatId, '‚õîÔ∏è –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä—ã: "–∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞", "10 –∞–ø—Ä–µ–ª—è –≤ 5 –≤–µ—á–µ—Ä–∞"');
    }

    const time = parsed.date();
    const task = text.replace(parsed.text, '').trim();
    const remindAt = time?.getTime();

    if (!remindAt || remindAt <= Date.now()) {
        return bot.sendMessage(chatId, '–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /–Ω–∞–ø–æ–º–Ω–∏ –ö—É–ø–∏—Ç—å —Ö–ª–µ–± —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç');
    }

    const id = db.addReminder(chatId, task, remindAt);
    bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª. ID: ${id}, –∑–∞–¥–∞—á–∞: "${task}" –≤ ${time.toLocaleString()}`);
    scheduleReminder({ id, chat_id: chatId, task, remind_at: remindAt });
}
